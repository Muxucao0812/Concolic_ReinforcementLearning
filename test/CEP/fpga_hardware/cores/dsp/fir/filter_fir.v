/*------------------------------------------------------------------------------
 * This code was generated by Spiral IIR Filter Generator, www.spiral.net
 * Copyright (c) 2006, Carnegie Mellon University
 * All rights reserved.
 * The code is distributed under a BSD style license
 * (see http://www.opensource.org/licenses/bsd-license.php)
 *------------------------------------------------------------------------------ */
/* ./iirGen.pl -A 256 0 378 0 179 0 32 0 2 0 0 0 -B 0 4 22 68 136 191 191 136 68 22 4 0 -moduleName acm_filter -fractionalBits 8 -bitWidth 32 -inData inData -inReg -outReg -outData outData -clk clk -reset reset -reset_edge negedge -filterForm 1 -outFile ../outputs/filter_1521525477.v */
/* Warning: zero-valued filter taps have been optimized away. */

module FIR_filter (
    inData,
    clk,
    outData,
    reset
);

  // Port mode declarations:
  input   [31:0] inData;
  input    clk;
  output  [31:0] outData;
  input    reset;

  //registerIn
  reg [31:0] inData_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      inData_in <= 32'h00000000;
    end  else begin
      inData_in <= inData;
    end
  end

  //registerOut
  reg [31:0] outData;
  wire [31:0] outData_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      outData <= 32'h00000000;
    end  else begin
      outData <= outData_in;
    end
  end

  wire [31:0] leftOut, rightOut;

  acm_filter_firBlock_left my_acm_filter_firBlock_left(
    .X(inData_in),
    .Y(leftOut),
    .clk(clk),
    .reset(reset)
);

  acm_filter_firBlock_right my_acm_filter_firBlock_right(
    .X(outData_in),
    .Y(rightOut),
    .clk(clk),
    .reset(reset)
);

  assign outData_in = leftOut + rightOut;

  //acm_filter area estimate = 105716.320536651;
endmodule //acm_filter

